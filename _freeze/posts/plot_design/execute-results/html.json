{
  "hash": "70d19fcc27476b88dd546687dd918ed7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Three Tips for Better R Figures\"\ndescription: \"More effective and readable plots\"\nauthor: \"Boyd Tarlinton\"\ndate: \"2025/03/29\"\ncategories:\n  - R\nknitr:\n  opts_chunk: \n    fig-showtext: true\n    warning: false\n    message: false\nformat: \n  html:\n    fig-align: center\n---\n\n\n\nRecently I shared my favourite ways to [ensure your R plots look great in `Quarto`\ndocuments](quarto_plots.qmd). Now I want to share my most commonly used tips for\nbuilding effective and readable plots in `R`.\n\nAs an example dataset I'll be using chip_dataset.csv, downloaded from [Vercel](https://chip-dataset.vercel.app/). Redistribution of the dataset is not\npermitted.\n\nLet's create a rough figure, and see how we can improve it in a few simple \nsteps.\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| fig-cap: \"A rough figure\"\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\n\nchips <- read.csv(\"chip_dataset.csv\")\n\nchips <- chips |> \n  mutate(Date = mdy(Release.Date),\n         transistors = as.numeric(Transistors..million.)) |>\n  filter(Foundry != \"\" &\n           Type == \"GPU\" &\n           !is.na(Date) &\n           !is.na(transistors))\n\nchips |> \n  ggplot(aes(x = Date, \n           y = transistors, \n           color = Foundry)) +\n    geom_point()\n```\n````\n\n::: {.cell-output-display}\n![A rough figure](plot_design_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n### Pick a great base theme\n\nWith `R` being more popular than ever, the default `ggplot2` theme is \n*everywhere*. In addition to being overused, the grey background can be a bit \nmuch. `ggplot2::theme_minimal` is an easy substitute and a great base for \nfurther customisation, but I really like `hrbrthemes::theme_ipsum`.\n\n### Use an effective colour palette\n\nEffective use of colour can ensure that your plots are able to be interpreted \nat a glance. The `viridis` palettes help to ensure that different values are \ndistinct, and are colourblind-friendly. Like the base `ggplot2` theme, `viridis` \npalettes are everywhere, but it's a hard choice to argue with!\n\n### Modify your theme\n\nEven though we've chosen a great theme, it's still important to consider whether\nit perfectly suits you needs. For example, I often like to drop the x-axis \ngridlines for a cleaner look. I will also place the legend below the plot, to \nallow the main contents to fill the page.\n\nWe'll apply the tips described above, as well as rescaling the y-axis and adding\nsome trendlines. Do you think this is a more effective figure?\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: feature-image\n#| fig-cap: \"The final figure\"\n\nlibrary(hrbrthemes)\nlibrary(sysfonts)\nlibrary(viridis)\nlibrary(scales)\n\nfont_add_google(\"Roboto Condensed\")\n\nchips |>\n  ggplot(aes(x = Date, y = transistors, color = Foundry)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = \"lm\", se = FALSE, alpha = 0.5) +\n  scale_colour_viridis_d(option = \"H\", direction = -1) +\n  scale_y_log10(labels = label_number()) +\n  theme_ipsum_rc(axis_title_size = 12) +\n  theme(legend.position = \"bottom\",\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank()) +\n  labs(y = \"Transistors (millions)\",\n       title = \"GPU Transistor Count by Release Date\",\n       subtitle = \"Data from https://chip-dataset.vercel.app/\")\n```\n````\n\n::: {.cell-output-display}\n![The final figure](plot_design_files/figure-html/feature-image-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "plot_design_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}