{
  "hash": "c196c7f2a6196fc3655e070789388fb7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Three Tips for Better Quarto Plots\"\ndescription: \"Simple methods for higher-quality figures\"\nauthor: \"Boyd Tarlinton\"\ndate: \"2025/03/29\"\ncategories:\n  - R\nknitr:\n  opts_chunk: \n    fig-showtext: true\n    warning: false\n    dev.args:\n      bg: yellow\nformat: \n  html:\n    fig-width: 4\n    fig-height: 3\n    fig-align: center\n---\n\n\n\nIf you regularly create `Quarto` documents, it s important to ensure that you \ncan incorporate quality figures without spending a long time messing about. \nThese are some of my favourite settings to ensure that my figures look great \nevery time I render a `Quarto` document.\n\n### Use `showtext` through `Knitr`\n\n`Showtext` offers better text rendering, as well as great control over settings \nsuch as DPI, which controls text size. Setting up `showtext` in your `Quarto` \nYAML metadata is much easier the calling `showtext_begin()` and `showtext_end()`\nevery time you want to produce a plot!\n\n```yaml\n---\nknitr:\n  opts_chunk: \n    fig-showtext: true\n---\n```\n\n### Use Google Fonts with `sysfonts`\n\nSimply calling `font_add_google()` with your chosen \n[Google Font](https://fonts.google.com/) will make that font available in your R\nsession and will look excellent in your `showtext`-enabled plots. Using Google \nFonts has the added benefit of make your code much more portable.\n\nLet's load something a bit wacky:\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nlibrary(sysfonts)\nfont_add_google(\"Bungee Tint\", db_cache = FALSE)\n```\n````\n:::\n\n\n\n::: {.column-margin}\nYou may need to specify `db_cache = FALSE` for some fonts that have not been \ncached in your `sysfonts` install.\n:::\n\n### Set dev options in `Knitr` chunks\n\nYou can set dev arguments in your chunks, again avoiding the (in my opinion) \nrather clunky dev functions. I typically use this to set a transparent \nbackground, but that's a pretty poor example on a white page. Let's set a solid\nbackground and see how a plot looks with our custom settings!\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| dev.args: !expr list(bg=\"beige\")\n#| fig-cap: \"An example figure\"\n\nlibrary(ggplot2)\ndata(\"mtcars\")\n\nmtcars |>\n  ggplot(aes(x = disp,\n             y = mpg)) +\n  geom_point() +\n  theme(text = element_text(family = \"Bungee Tint\"),\n        panel.background = element_blank(),\n        plot.background = element_blank())\n```\n````\n\n::: {.cell-output-display}\n![An example figure](quarto_plots_files/figure-html/unnamed-chunk-2-1.png){width=384}\n:::\n:::\n",
    "supporting": [
      "quarto_plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}