{
  "hash": "6e3f58ff47c214392f773555070f90e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Managing Remote Database Connections from Quarto Documents\"\ndescription: \"And integrate seamlessly with your R code\"\nauthor: \"Boyd Tarlinton\"\ndate: \"2025/08/10\"\ncategories:\n  - R\n  - Databases\nexecute: \n  echo: fenced\n  eval: false\n---\n\n\n\nR offers excellent facilities for working interactively with SQL databases on a \nremote server. It becomes more challenging to do so in a self-contained Quarto \ndocument, especially if you wish to be able to render it without running into \nerrors. Fortunately, there are ways around these challenges.\n\nThe first step is establishing an SSH connection with the remote server on \nwhich your database is running, allowing you to interact with the database as \nthough it were running on your own device. In an interactive session you could \nuse the following code to establish an SSH connection and open a tunnel. The\n`ssh_tunnel` function will run indefinitely, leaving you unable to execute \nother code, but you can open a second R session and communicate with the \ndatabase in that second session. \n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nsession <- ssh::ssh_connect(\"username@targetserver.com\")\nssh::ssh_tunnel(session, port = 3305, \n         target = \"localhost:3306\")\n```\n````\n:::\n\n\n\nIn the example above we map port 3306 on the remote server (the default port \nfor MySQL) to port 3305 on our local machine. You will often want to use the \nsame port on the local machine, but I find it is easier to keep track of \nexamples where different values are used.\n\nIn a Quarto document you will need to run the SSH tunnel in the background. \nThis is made easy with the `callr` package. The example below will run the \nSSH tunnel in a separate background process.\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nrbg <- callr::r_bg(\\() {\n  session <- ssh::ssh_connect(\"username@targetserver.com\")\n  ssh::ssh_tunnel(session, port = 3305, \n           target = \"localhost:3306\")\n})\n```\n````\n:::\n\n\n\nYou can now open a connection to the database as though it were running on your \nlocal machine on port 3305. Given that the SSH tunnel is opened in a separate \nprocess, I often find that if you attempt to connect to the database  \ndirectly after opening the tunnel you will encounter an error. To prevent this,\nI use `Sys.sleep()` to add a delay and allow the SSH tunnel to finish \nconnecting before establishing the connection to the database.\n\nIt is easiest and safest to manage your database connections with a \nconfiguration file. Typically these are stored in a user directory, but I \nprefer to create them on a per-project basis.\n\n```{.cnf filename=\".my.cnf\"}\n[groupname]\ndatabase=\"mydatabase\"\nhost=\"localhost\"\nport=\"3305\"\nuser=\"username\"\npassword=\"mypassword\"\n```\n\nYou can use the a conf file setup like above to connect to the database.\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\ncon <- DBI::dbConnect(RMySQL::MySQL(), \n                 group = \"groupname\", \n                 default.file = \".my.cnf\")\n```\n````\n:::\n\n\n\nYou can now access the database using `DBI` in R.\n\nIf you are already an experienced SQL user, you can write SQL directly in Quarto \nusing your established connection. The ability to switch between R, Python, \nand even Julia is marketed quite heavily by the Posit team, while this SQL \nfunctionality seems much more obscure.\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{sql}}\n#| connection: \"con\"\nselect * from mytable;\n```\n````\n:::\n\n\n\nYou can even output of an SQL query to an R object, in this example named `df`,\nallowing you to seamlessly integrate SQL queries and R code.\n\n\n\n::: {.cell output.var='df'}\n\n````{.cell-code}\n```{{sql}}\n#| connection: \"con\"\n#| output.var: \"df\"\nselect * from mytable;\n```\n````\n:::\n\n\n\nYou should now be set to query with confidence.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}